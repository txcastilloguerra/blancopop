<?php
// $Id: versioncontrol_git.module,v 1.22 2009/04/11 14:38:45 corni Exp $
/**
 * @file
 * Git backend for Version Control API - Provides Git commit information and
 * account management as a pluggable backend.
 *
 * Copyright 2008 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 * Copyright 2009 by Cornelius Riemenschneider ("CorniI", http://drupal.org/user/136353)
 */

// Update methods.
define('VERSIONCONTROL_GIT_UPDATE_CRON', 0);
define('VERSIONCONTROL_GIT_UPDATE_XGIT', 1);

// The admin and user edit pages.
include_once(drupal_get_path('module', 'versioncontrol_git') .'/versioncontrol_git.admin.inc');

/**
 * Implementation of hook_help().
 */
function versioncontrol_git_help($section, $arg) {
  $output = '';
  if ($section == 'admin/help/versioncontrol_git' || $section == 'admin/help#versioncontrol_git') {
    $output = '<p>The Git Backend can be used to retrieve and view commit information. The commit
      information can either be retreived automatically through the use of the <i>xgit</i> scripts
      or using the <i>fetch now</i> link on the project administration repository page. The logs
      are then defaultly avaliable through the <i>commitlog</i> page.</p>
      <p>Information reguarding the setup of <i>xgit</i> scripts is aviable in the <i>README.txt</i>
      located in the <i>xgit</i> directory.</p>
      <p>If you have any questions, comments, or feature requests please visit the
      <a href="http://drupal.org/project/versioncontrol_git">module page</a> and
      post your concerns in the issue quene.</p>';
  }

  return $output;
}

/**
 * Implementation of hook_versioncontrol_backends().
 *
 * @return
 *   A structured array containing information about this known backends.
 *   Array key is the unique string identifier of the version control system.
 *   The corresponding array values are again structured arrays and consist
 *   of elements with the following keys:
 *
 *   'name': The user-visible name of the VCS.
 *   'description': A short description of the backend, if possible not longer
 *                  than one or two sentences.
 *   'capabilities': An array listing optional capabilities, in addition to the
 *                   required functionality like retrieval of detailed
 *                   commit information. Array values can be an arbitrary
 *                   combination of VERSIONCONTROL_CAPABILITY_* values. If no
 *                   additional capabilities are supported by the backend,
 *                   this array will be empty.
 *   'autoadd': An array listing which tables should be managed by
 *              Version Control API instead of doing it manually in
 *              the backend. Array values can be an arbitrary combination of
 *              VERSIONCONTROL_AUTOADD_* values. If no array additions
 *              should be automatically managed, this array will be empty.
 */
function versioncontrol_git_versioncontrol_backends() {
  return array(
    // The array key is up to 8 characters long, and used as unique identifier
    // for this VCS, in functions, URLs and in the database.
    'git' => array(
      // The user-visible name of the VCS.
      'name' => 'Git',

      // A short description of the VCS, if possible not longer than one or two sentences.
      'description' => t('Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.'),

      // A list of optional capabilities, in addition to the required retrieval
      // of detailed commit information.
      'capabilities' => array(
        // Use the commit hash for to identify the commit instead of an idvidual
        // revision for each file.
        VERSIONCONTROL_CAPABILITY_ATOMIC_COMMITS
      ),

      // An array listing which tables should be managed by Version Control API
      // instead of doing it manually in the backend.
      'flags' => array(
        // versioncontrol_insert_repository() will automatically insert
        // array elements from $repository['git_specific'] into
        // {versioncontrol_git_repositories} and versioncontrol_get_repositories()
        // will automatically fetch it from there.
        VERSIONCONTROL_FLAG_AUTOADD_REPOSITORIES,
      ),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function versioncontrol_git_menu() {
  $items = array();
  $items['admin/project/versioncontrol-repositories/clearlock/git'] = array(
    'title' => 'Clear lock',
    'page callback' => 'versioncontrol_git_clearlock_repository_callback',
    'access arguments' => array('administer version control systems'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/project/versioncontrol-repositories/update/git'] = array(
    'title' => 'Fetch log',
    'page callback' => 'versioncontrol_git_update_repository_callback',
    'access arguments' => array('administer version control systems'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_cron():
 * Update repositories that have log fetching enabled.
 */
function versioncontrol_git_cron() {
  $result = db_query("SELECT repo_id FROM {versioncontrol_git_repositories}
                      WHERE update_method = %d", VERSIONCONTROL_GIT_UPDATE_CRON);

  // Set timeout limit to 3600 seconds as it can take a long time to process
  // the log initially. (And hook_cron() might be called by poormanscron.)
  if (!ini_get('safe_mode')) {
    set_time_limit(3600);
  }
  while ($repo = db_fetch_object($result)) {
    $repository = versioncontrol_get_repository($repo->repo_id);
    if (isset($repository)) {
      _versioncontrol_git_update_repository($repository);
    }
  }
}

/**
 * Implementation of [versioncontrol_backend]_get_selected_label_from_operation():
 * Retrieve the tag or branch that applied to that item during the given
 * operation. The result of this function will be used for the selected label
 * property of the item, which is necessary to preserve the item state
 * throughout navigational API functions.
 *
 * This function is mandatory for backends to implement.
 *
 * @param $operation
 *   A single operation array to which the item belongs, like the ones returned
 *   by versioncontrol_get_operations(). Specifically, $operation contains the
 *   'labels' element which should probably be reused by this function.
 * @param $target_item
 *   The item revision for which the label should be retrieved.
 *
 * @return
 *   NULL if the given item does not belong to any label or if the appropriate
 *   label cannot be retrieved. Otherwise a label array is returned, consisting
 *   of the following elements:
 *
 *   - 'name': The branch or tag name (a string).
 *   - 'type': Whether this label is a branch (indicated by the
 *        VERSIONCONTROL_OPERATION_BRANCH constant) or a tag
 *        (VERSIONCONTROL_OPERATION_TAG).
 *
 *   In case the label array also contains the 'label_id' element (which
 *   happens when it's copied from the $operation['labels'] array) there will
 *   be a small performance improvement as the label doesn't need to be
 *   compared to and loaded from the database anymore.
 */
function versioncontrol_git_get_selected_label_from_operation($operation, $target_item) {
  // TODO: implement tag support here, tags>branch?
  // better not, after looking it again current code is OK.
  // just take the first branch, dunno what else we should do here...
  // jpetso knows neither :P
  return $operation['labels'][0];
}

function _versioncontrol_git_get_branch_intersect($repository, $item1, $item2) {
  $constraints = array(
    'revisions' => array($item1['revision'], $item2['revision']),
    'vcs' => array('git'),
    'repo_ids' => array($repository['repo_id']),
    'types' => array(VERSIONCONTROL_OPERATION_COMMIT)
  );
  $commit_ops = versioncontrol_get_operations($constraints);
  $branches1 = array();
  $branches2 = array();
  foreach ($commit_ops as $vc_op_id => $op) {
    foreach ($op['labels'] as $label) {
      if ($label['type'] === VERSIONCONTROL_OPERATION_BRANCH) {
        if ($op['revision'] == $item1['revision']) {
          $branches1[]=$label;
        }
        else if ($op['revision'] == $item2['revision']) {
          $branches2[]=$label;
        }
      }
    }
  }
  $branches = array_intersect($branches1, $branches2);
  return array_pop($branches); // We don't know any keys in $branches, so we use array_pop here. Also it'll return NULL if needed
}

/**
 * Implementation of [versioncontrol_backend]_get_selected_label_from_other_item():
 * Retrieve a valid label (tag or branch) for a new @p $target_item that is
 * (hopefully) similar or related to that of the given @p $other_item which
 * already has a selected label assigned. If the backend cannot find a related
 * label, return any valid label. The result of this function will be used for
 * the selected label property of each item, which is necessary to preserve the
 * item state throughout navigational API functions.
 *
 * This function is mandatory for backends to implement.
 *
 * @param $repository
 *   The repository array (like returned by versioncontrol_get_repository())
 *   of the repository which contains both the source and the successor item.
 * @param $target_item
 *   The item revision for which the label should be retrieved.
 * @param $other_item
 *   The item revision that the selected label should be derived from.
 *   For example, if @p $other_item in a CVS repository is at revision
 *   '1.5.2.1' which is on the 'DRUPAL-6--1' branch, and the @p $target_item
 *   is at revision '1.5' (its predecessor) which is present on both the
 *   'DRUPAL-6--1' and 'HEAD' branches, then this function should return a
 *   label array for the 'DRUPAL-6--1' branch.
 * @param $other_item_tags
 *   An array with a simple list of strings that describe properties of the
 *   @p $other_item, in relation to the @p $target_item. You can use those
 *   in order to make assumptions so that the selected label can be retrieved
 *   more accurately or with better performance. Version Control API passes a
 *   list that may contain zero or more of the following tags:
 *
 *   - 'source_item': The @p $other_item is a predecessor of the
 *        @p $target_item - same entity, but in an earlier revision and
 *        potentially with a different path, too (only if the backend supports
 *        item moves).
 *   - 'successor_item': The @p $other_item is a successor of the
 *        @p $target_item - same entity, but in a later revision and
 *        potentially with a different path, too (only if the backend supports
 *        item moves).
 *   - 'same_revision': The @p $other_item is at the same (global) revision
 *        as the @p $target_item. Specifically meant for backends whose
 *        version control systems don't support atomic commits.
 *
 * @return
 *   NULL if the given item does not belong to any label or if an appropriate
 *   label cannot be retrieved. Otherwise a label array is returned, consisting
 *   of the following elements:
 *
 *   - 'name': The branch or tag name (a string).
 *   - 'type': Whether this label is a branch (indicated by the
 *        VERSIONCONTROL_OPERATION_BRANCH constant) or a tag
 *        (VERSIONCONTROL_OPERATION_TAG).
 *
 *   In case the label array also contains the 'label_id' element (which
 *   happens when it's copied from the $operation['labels'] array) there will
 *   be a small performance improvement as the label doesn't need to be
 *   compared to and loaded from the database anymore.
 */
function versioncontrol_git_get_selected_label_from_other_item($repository, $target_item, &$other_item, $other_item_tags = array()) {
  // First up, optimizations - maybe we can do without the generic
  // "label transfer" code from further down and use assumptions instead.
  // Let's assume for FakeVCS repositories that if an item wears a label, then
  // an item at another path but with the same (file-level) revision can also
  // wear that same label. That is the case with some version control systems
  // (e.g. Git, Mercurial, Bazaar) but might not be the case with others
  // (CVS for its lack of global revision identifiers, SVN for its use of
  // directory structure as tag/branch identifiers).
  if ($item['revision'] == $other_item['revision']) {
    return versioncontrol_get_item_selected_label($repository, $other_item);
  }

  //can be maybe optimized for speed by using the hints provided
  return _versioncontrol_git_get_branch_intersect($repository, $target_item, $other_item);
}

/**
 * Implementation of [versioncontrol_backend]_account_username_suggestion():
 * Return the most accurate guess on what the VCS username for a Drupal user
 * might look like in the given repository.
 *
 * @param $repository
 *   The repository where the the VCS account exists or will be located.
 * @param $user
 *  The Drupal user who wants to register an account.
 *  @TODO: adjust later
 */
function versioncontrol_git_account_username_suggestion($repository, $user) {
  // Use the kindof standard git identifier here, it's nothing too serious.
  return $user->name ." <$user->mail>";
}

/**
 * Implementation of [versioncontrol_backend]_is_account_username_valid():
 * Determine if the given repository allows a username to exist.
 *
 * This function is optional for backend modules to implement. If it's not
 * implemented, only usernames will be accepted that consist solely of
 * alphanumeric characters.
 *
 * @param $repository
 *   The repository where the the VCS account exists or will be located.
 * @param $username
 *  The username to check. It is passed by reference so if the username is
 *  valid but needs minor adaptions (such as cutting away unneeded parts) then
 *  it the backend can modify it before returning the result.
 *
 * @return
 *   TRUE if the username is valid, FALSE if not.
 *   @TODO: adjust, too
 */
function versioncontrol_git_is_account_username_valid($repository, &$username) {
  // We want to allow "prename name <email@example.org>"
  // Or just "nick <email@example.org>"
  // Or just whatever naming convention you like
  // This means, we just check for control characters and NULs here
  if (preg_match("/[\\x00-\\x1f]/", $username) == 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Menu callback for 'admin/project/versioncontrol-repositories/clearlock/git'
 * (expecting a $repo_id as one more path argument):
 * Clears the update lock for the specified repository
 */
function versioncontrol_git_clearlock_repository_callback($repo_id) {
  if (is_numeric($repo_id)) {
    db_query('UPDATE {versioncontrol_git_repositories}
            SET locked = 0 WHERE repo_id = %d', $repo_id);
    drupal_set_message(t('Cleared the lock for the repository.'));
  }
  drupal_goto('admin/project/versioncontrol-repositories');
}

/**
 * Menu callback for 'admin/project/versioncontrol-repositories/update/git'
 * (expecting a $repo_id as one more path argument):
 * Retrieve/validate the specified repository, fetch new commits, tags
 * and branches by invoking the git executable, output messages and
 * redirect back to the repository page.
 */
function versioncontrol_git_update_repository_callback($repo_id) {
  if (is_numeric($repo_id)) {
    $repository = versioncontrol_get_repository($repo_id);

    if (isset($repository)) {
      $update_method = $repository['git_specific']['update_method'];
    }
  }
  if (isset($update_method) && $update_method == VERSIONCONTROL_GIT_UPDATE_CRON) {
    // Set timeout limit to 3600 seconds as it can take a long time
    // to process the log initially.
    if (!ini_get('safe_mode')) {
      set_time_limit(3600);
    }
    if (_versioncontrol_git_update_repository($repository)) {
      drupal_set_message(t('Fetched new log entries.'));
    }
    else {
      drupal_set_message(t('Error while fetching new log entries.'), 'error');
    }
  }
  else { // $repo_id is not a number or doesn't correlate to any repository.
    drupal_set_message(t('No such repository, did not fetch anything.'));
  }
  drupal_goto('admin/project/versioncontrol-repositories');
}

/**
 * Actually update the repository by fetching commits and other stuff
 * directly from the repository, invoking the git executable.
 *
 * @return
 *   TRUE if the logs were updated, or FALSE if fetching and updating the logs
 *   failed for whatever reason.
 */
function _versioncontrol_git_update_repository(&$repository) {
  include_once(drupal_get_path('module', 'versioncontrol_git') .'/versioncontrol_git.log.inc');
  return _versioncontrol_git_log_update_repository($repository);
}

/**
 * Implementation of [versioncontrol_backend]_format_revision_identifier():
 * Get the user-visible version of a commit identifier a.k.a. 'revision',
 * as plaintext.
 *
 * Version control backends can choose to implement their own version of this
 * function, which for example makes it possible to cut the SHA-1 hash in
 * distributed version control systems down to a readable length.
 *
 * @param $revision
 *   The commit identifier that should be themed.
 * @param $format
 *   Either 'full' for the original version, or 'short' for a more compact form.
 *   If the commit identifier doesn't need to be shortened, the results can
 *   be the same for both versions.
 */
function versioncontrol_git_format_revision_identifier($repository, $revision, $format = 'full') {
  switch ($format) {
    case 'short':
        // Let's return only the first 7 characters of the revision identifier,
        // like git log --abbrev-commit does by default.
        return substr($revision, 0, 7);
    case 'full':
    default:
      return $revision;
  }
}

/**
 * Delete the cache file for a given repository.
 * @param $repository
 * 	The repository to delete the cache for
 */
function _versioncontrol_git_delete_repository_cache($repository) {
  $cache = $repository['git_specific']['cache_path'];
  if (file_exists($cache)) {
    @unlink($cache);
  }
}

/**
 * Implementation of [versioncontrol_backend]_repository():
 * Manage (insert, update or delete) additional FakeVCS repository data
 * in the database.
 *
 * This function is optional for backend modules to implement. If you don't
 * need custom repository data (or you let the Version Control API manage it),
 * just don't implement it.
 *
 * @param $op
 *   Either 'insert' when the repository has just been created, or 'update'
 *   when repository name, root, URL backend or module specific data change,
 *   or 'delete' if it will be deleted after this function has been called.
 *
 * @param $repository
 *   The repository array containing the repository. It's a single
 *   repository array like the one returned by versioncontrol_get_repository(),
 *   so it consists of the following elements:
 *
 *   - 'repo_id': The unique repository id.
 *   - 'name': The user-visible name of the repository.
 *   - 'vcs': The unique string identifier of the version control system
 *        that powers this repository.
 *   - 'root': The root directory of the repository. In most cases,
 *        this will be a local directory (e.g. '/var/repos/drupal'),
 *        but it may also be some specialized string for remote repository
 *        access. How this string may look like depends on the backend.
 *   - 'authorization_method': The string identifier of the repository's
 *        authorization method, that is, how users may register accounts
 *        in this repository. Modules can provide their own methods
 *        by implementing hook_versioncontrol_authorization_methods().
 *   - 'url_backend': The prefix (excluding the trailing underscore)
 *        for URL backend retrieval functions.
 *   - '[xxx]_specific': An array of VCS specific additional repository
 *        information. How this array looks like is defined by the
 *        corresponding backend module (versioncontrol_[xxx]).
 */
function versioncontrol_git_repository($op, $repository) {
  if ($op == 'delete') {
    _versioncontrol_git_delete_repository_cache($repository);
  }
}

function versioncontrol_git_disable() {
  $constraints = array(
    'vcs' => array('git')
  );
  $repos = versioncontrol_get_repositories($constraints);
  foreach ($repos as $repository) {
    _versioncontrol_git_delete_repository_cache($repository);
  }
}
